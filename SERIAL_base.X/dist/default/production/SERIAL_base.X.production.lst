

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Aug 16 19:04:57 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    18   000000                     
    19                           ; Generated 23/03/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4520 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000000                     _RCREG	set	4014
    54   000000                     _TXREG	set	4013
    55   000000                     _SPBRG	set	4015
    56   000000                     _BAUDCTLbits	set	4024
    57   000000                     _TRMT	set	32097
    58   000000                     _OSCTUNE	set	3995
    59   000000                     _RCSTAbits	set	4011
    60   000000                     _TXSTAbits	set	4012
    61   000000                     _RCIF	set	31989
    62   000000                     _ADCON1	set	4033
    63   000000                     _OSCCON	set	4051
    64                           
    65                           	psect	smallconst
    66   000600                     __psmallconst:
    67                           	callstack 0
    68   000600  00                 	db	0
    69   000601                     STR_1:
    70   000601  0D                 	db	13
    71   000602  0A                 	db	10
    72   000603  00                 	db	0
    73   000604  00                 	db	0	; dummy byte at the end
    74   000000                     
    75                           ; #config settings
    76                           
    77                           	psect	cinit
    78   0006DC                     __pcinit:
    79                           	callstack 0
    80   0006DC                     start_initialization:
    81                           	callstack 0
    82   0006DC                     __initialization:
    83                           	callstack 0
    84   0006DC                     end_of_initialization:
    85                           	callstack 0
    86   0006DC                     __end_of__initialization:
    87                           	callstack 0
    88   0006DC  0E00               	movlw	low (__Lsmallconst shr (0+16))
    89   0006DE  6EF8               	movwf	tblptru,c
    90   0006E0  0E06               	movlw	high __Lsmallconst
    91   0006E2  6EF7               	movwf	tblptrh,c
    92   0006E4  0100               	movlb	0
    93   0006E6  EF03  F003         	goto	_main	;jump to C main() function
    94                           
    95                           	psect	cstackCOMRAM
    96   000001                     __pcstackCOMRAM:
    97                           	callstack 0
    98   000001                     eusart_write@c:
    99                           	callstack 0
   100                           
   101                           ; 1 bytes @ 0x0
   102   000001                     	ds	1
   103   000002                     eusart_string@str:
   104                           	callstack 0
   105                           
   106                           ; 2 bytes @ 0x1
   107   000002                     	ds	2
   108   000004                     ??_main:
   109                           
   110                           ; 1 bytes @ 0x3
   111   000004                     	ds	2
   112                           
   113 ;;
   114 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   115 ;;
   116 ;; *************** function _main *****************
   117 ;; Defined at:
   118 ;;		line 77 in file "Program_main.c"
   119 ;; Parameters:    Size  Location     Type
   120 ;;		None
   121 ;; Auto vars:     Size  Location     Type
   122 ;;		None
   123 ;; Return value:  Size  Location     Type
   124 ;;                  1    wreg      void 
   125 ;; Registers used:
   126 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   127 ;; Tracked objects:
   128 ;;		On entry : 0/0
   129 ;;		On exit  : 0/0
   130 ;;		Unchanged: 0/0
   131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   132 ;;      Params:         0       0       0       0       0       0       0
   133 ;;      Locals:         0       0       0       0       0       0       0
   134 ;;      Temps:          2       0       0       0       0       0       0
   135 ;;      Totals:         2       0       0       0       0       0       0
   136 ;;Total ram usage:        2 bytes
   137 ;; Hardware stack levels required when called: 2
   138 ;; This function calls:
   139 ;;		_config_FOSC
   140 ;;		_config_IO
   141 ;;		_eusart_init
   142 ;;		_eusart_string
   143 ;;		_eusart_write
   144 ;; This function is called by:
   145 ;;		Startup code after reset
   146 ;; This function uses a non-reentrant model
   147 ;;
   148                           
   149                           	psect	text0
   150   000606                     __ptext0:
   151                           	callstack 0
   152   000606                     _main:
   153                           	callstack 29
   154   000606                     
   155                           ;Program_main.c: 79:     config_FOSC();
   156   000606  EC75  F003         	call	_config_FOSC	;wreg free
   157                           
   158                           ;Program_main.c: 80:     config_IO();
   159   00060A  EC7A  F003         	call	_config_IO	;wreg free
   160                           
   161                           ;Program_main.c: 81:     eusart_init();
   162   00060E  EC65  F003         	call	_eusart_init	;wreg free
   163   000612                     l805:
   164                           
   165                           ;Program_main.c: 84:     {;Program_main.c: 85:         eusart_write('P');
   166   000612  0E50               	movlw	80
   167   000614  EC5A  F003         	call	_eusart_write
   168   000618                     
   169                           ;Program_main.c: 86:         eusart_write('I');
   170   000618  0E49               	movlw	73
   171   00061A  EC5A  F003         	call	_eusart_write
   172   00061E                     
   173                           ;Program_main.c: 87:         eusart_write('C');
   174   00061E  0E43               	movlw	67
   175   000620  EC5A  F003         	call	_eusart_write
   176   000624                     
   177                           ;Program_main.c: 88:         eusart_write(' ');
   178   000624  0E20               	movlw	32
   179   000626  EC5A  F003         	call	_eusart_write
   180   00062A                     
   181                           ;Program_main.c: 89:         eusart_write('1');
   182   00062A  0E31               	movlw	49
   183   00062C  EC5A  F003         	call	_eusart_write
   184   000630                     
   185                           ;Program_main.c: 90:         eusart_write('8');
   186   000630  0E38               	movlw	56
   187   000632  EC5A  F003         	call	_eusart_write
   188   000636                     
   189                           ;Program_main.c: 91:         eusart_write('F');
   190   000636  0E46               	movlw	70
   191   000638  EC5A  F003         	call	_eusart_write
   192   00063C                     
   193                           ;Program_main.c: 92:         eusart_write('4');
   194   00063C  0E34               	movlw	52
   195   00063E  EC5A  F003         	call	_eusart_write
   196   000642                     
   197                           ;Program_main.c: 93:         eusart_write('5');
   198   000642  0E35               	movlw	53
   199   000644  EC5A  F003         	call	_eusart_write
   200   000648                     
   201                           ;Program_main.c: 94:         eusart_write('2');
   202   000648  0E32               	movlw	50
   203   00064A  EC5A  F003         	call	_eusart_write
   204   00064E                     
   205                           ;Program_main.c: 95:         eusart_write('0');
   206   00064E  0E30               	movlw	48
   207   000650  EC5A  F003         	call	_eusart_write
   208   000654                     
   209                           ;Program_main.c: 96:         eusart_string("\r\n");
   210   000654  0E01               	movlw	low STR_1
   211   000656  6E02               	movwf	eusart_string@str^0,c
   212   000658  0E06               	movlw	high STR_1
   213   00065A  6E03               	movwf	(eusart_string@str+1)^0,c
   214   00065C  EC3F  F003         	call	_eusart_string	;wreg free
   215   000660                     
   216                           ;Program_main.c: 97:         _delay((unsigned long)((500)*(8000000/4000.0)));
   217   000660  0E06               	movlw	6
   218   000662  6E05               	movwf	(??_main+1)^0,c
   219   000664  0E13               	movlw	19
   220   000666  6E04               	movwf	??_main^0,c
   221   000668  0EAE               	movlw	174
   222   00066A                     u57:
   223   00066A  2EE8               	decfsz	wreg,f,c
   224   00066C  D7FE               	bra	u57
   225   00066E  2E04               	decfsz	??_main^0,f,c
   226   000670  D7FC               	bra	u57
   227   000672  2E05               	decfsz	(??_main+1)^0,f,c
   228   000674  D7FA               	bra	u57
   229   000676  EF09  F003         	goto	l805
   230   00067A  EF00  F000         	goto	start
   231   00067E                     __end_of_main:
   232                           	callstack 0
   233                           
   234 ;; *************** function _eusart_string *****************
   235 ;; Defined at:
   236 ;;		line 23 in file "eusart.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;  str             2    1[COMRAM] PTR unsigned char 
   239 ;;		 -> STR_1(3), 
   240 ;; Auto vars:     Size  Location     Type
   241 ;;		None
   242 ;; Return value:  Size  Location     Type
   243 ;;                  1    wreg      void 
   244 ;; Registers used:
   245 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   246 ;; Tracked objects:
   247 ;;		On entry : 0/0
   248 ;;		On exit  : 0/0
   249 ;;		Unchanged: 0/0
   250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   251 ;;      Params:         2       0       0       0       0       0       0
   252 ;;      Locals:         0       0       0       0       0       0       0
   253 ;;      Temps:          0       0       0       0       0       0       0
   254 ;;      Totals:         2       0       0       0       0       0       0
   255 ;;Total ram usage:        2 bytes
   256 ;; Hardware stack levels used: 1
   257 ;; Hardware stack levels required when called: 1
   258 ;; This function calls:
   259 ;;		_eusart_write
   260 ;; This function is called by:
   261 ;;		_main
   262 ;; This function uses a non-reentrant model
   263 ;;
   264                           
   265                           	psect	text1
   266   00067E                     __ptext1:
   267                           	callstack 0
   268   00067E                     _eusart_string:
   269                           	callstack 29
   270   00067E                     
   271                           ;eusart.c: 23: void eusart_string(char *str);eusart.c: 24: {;eusart.c: 25:     while(*st
      +                          r!='\0')
   272   00067E  EF4B  F003         	goto	l801
   273   000682                     l797:
   274                           
   275                           ;eusart.c: 26:     {;eusart.c: 27:         eusart_write(*str);
   276   000682  C002  FFF6         	movff	eusart_string@str,tblptrl
   277   000686  C003  FFF7         	movff	eusart_string@str+1,tblptrh
   278   00068A                     	if	0	;tblptru may be non-zero
   279   00068A                     	endif
   280   00068A                     	if	0	;tblptru may be non-zero
   281   00068A                     	endif
   282   00068A  0008               	tblrd		*
   283   00068C  50F5               	movf	tablat,w,c
   284   00068E  EC5A  F003         	call	_eusart_write
   285   000692                     
   286                           ;eusart.c: 28:         str++;
   287   000692  4A02               	infsnz	eusart_string@str^0,f,c
   288   000694  2A03               	incf	(eusart_string@str+1)^0,f,c
   289   000696                     l801:
   290                           
   291                           ;eusart.c: 25:     while(*str!='\0')
   292   000696  C002  FFF6         	movff	eusart_string@str,tblptrl
   293   00069A  C003  FFF7         	movff	eusart_string@str+1,tblptrh
   294   00069E                     	if	0	;tblptru may be non-zero
   295   00069E                     	endif
   296   00069E                     	if	0	;tblptru may be non-zero
   297   00069E                     	endif
   298   00069E  0008               	tblrd		*
   299   0006A0  50F5               	movf	tablat,w,c
   300   0006A2  0900               	iorlw	0
   301   0006A4  A4D8               	btfss	status,2,c
   302   0006A6  EF57  F003         	goto	u41
   303   0006AA  EF59  F003         	goto	u40
   304   0006AE                     u41:
   305   0006AE  EF41  F003         	goto	l797
   306   0006B2                     u40:
   307   0006B2  0012               	return		;funcret
   308   0006B4                     __end_of_eusart_string:
   309                           	callstack 0
   310                           
   311 ;; *************** function _eusart_write *****************
   312 ;; Defined at:
   313 ;;		line 16 in file "eusart.c"
   314 ;; Parameters:    Size  Location     Type
   315 ;;  c               1    wreg     unsigned char 
   316 ;; Auto vars:     Size  Location     Type
   317 ;;  c               1    0[COMRAM] unsigned char 
   318 ;; Return value:  Size  Location     Type
   319 ;;                  1    wreg      void 
   320 ;; Registers used:
   321 ;;		wreg
   322 ;; Tracked objects:
   323 ;;		On entry : 0/0
   324 ;;		On exit  : 0/0
   325 ;;		Unchanged: 0/0
   326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   327 ;;      Params:         0       0       0       0       0       0       0
   328 ;;      Locals:         1       0       0       0       0       0       0
   329 ;;      Temps:          0       0       0       0       0       0       0
   330 ;;      Totals:         1       0       0       0       0       0       0
   331 ;;Total ram usage:        1 bytes
   332 ;; Hardware stack levels used: 1
   333 ;; This function calls:
   334 ;;		Nothing
   335 ;; This function is called by:
   336 ;;		_eusart_string
   337 ;;		_main
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           	psect	text2
   342   0006B4                     __ptext2:
   343                           	callstack 0
   344   0006B4                     _eusart_write:
   345                           	callstack 30
   346                           
   347                           ;incstack = 0
   348                           ;eusart_write@c stored from wreg
   349   0006B4  6E01               	movwf	eusart_write@c^0,c
   350   0006B6                     l22:
   351   0006B6  A2AC               	btfss	4012,1,c	;volatile
   352   0006B8  EF60  F003         	goto	u11
   353   0006BC  EF62  F003         	goto	u10
   354   0006C0                     u11:
   355   0006C0  EF5B  F003         	goto	l22
   356   0006C4                     u10:
   357   0006C4                     
   358                           ;eusart.c: 19:     TXREG = c;
   359   0006C4  C001  FFAD         	movff	eusart_write@c,4013	;volatile
   360   0006C8  0012               	return		;funcret
   361   0006CA                     __end_of_eusart_write:
   362                           	callstack 0
   363                           
   364 ;; *************** function _eusart_init *****************
   365 ;; Defined at:
   366 ;;		line 4 in file "eusart.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;		None
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg, status,2
   375 ;; Tracked objects:
   376 ;;		On entry : 0/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   380 ;;      Params:         0       0       0       0       0       0       0
   381 ;;      Locals:         0       0       0       0       0       0       0
   382 ;;      Temps:          0       0       0       0       0       0       0
   383 ;;      Totals:         0       0       0       0       0       0       0
   384 ;;Total ram usage:        0 bytes
   385 ;; Hardware stack levels used: 1
   386 ;; This function calls:
   387 ;;		Nothing
   388 ;; This function is called by:
   389 ;;		_main
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393                           	psect	text3
   394   0006CA                     __ptext3:
   395                           	callstack 0
   396   0006CA                     _eusart_init:
   397                           	callstack 30
   398   0006CA                     
   399                           ;eusart.c: 6:     TXSTAbits.TXEN = 1;
   400   0006CA  8AAC               	bsf	172,5,c	;volatile
   401                           
   402                           ;eusart.c: 7:     RCSTAbits.CREN = 1;
   403   0006CC  88AB               	bsf	171,4,c	;volatile
   404                           
   405                           ;eusart.c: 8:     TXSTAbits.SYNC = 0;
   406   0006CE  98AC               	bcf	172,4,c	;volatile
   407                           
   408                           ;eusart.c: 9:     RCSTAbits.SPEN = 1;
   409   0006D0  8EAB               	bsf	171,7,c	;volatile
   410                           
   411                           ;eusart.c: 10:     TXSTAbits.BRGH = 0;
   412   0006D2  94AC               	bcf	172,2,c	;volatile
   413                           
   414                           ;eusart.c: 11:     BAUDCTLbits.BRG16 = 0;
   415   0006D4  96B8               	bcf	184,3,c	;volatile
   416   0006D6                     
   417                           ;eusart.c: 12:     SPBRG = 12;
   418   0006D6  0E0C               	movlw	12
   419   0006D8  6EAF               	movwf	175,c	;volatile
   420   0006DA  0012               	return		;funcret
   421   0006DC                     __end_of_eusart_init:
   422                           	callstack 0
   423                           
   424 ;; *************** function _config_IO *****************
   425 ;; Defined at:
   426 ;;		line 72 in file "Program_main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;		None
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, status,2
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   440 ;;      Params:         0       0       0       0       0       0       0
   441 ;;      Locals:         0       0       0       0       0       0       0
   442 ;;      Temps:          0       0       0       0       0       0       0
   443 ;;      Totals:         0       0       0       0       0       0       0
   444 ;;Total ram usage:        0 bytes
   445 ;; Hardware stack levels used: 1
   446 ;; This function calls:
   447 ;;		Nothing
   448 ;; This function is called by:
   449 ;;		_main
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text4
   454   0006F4                     __ptext4:
   455                           	callstack 0
   456   0006F4                     _config_IO:
   457                           	callstack 30
   458   0006F4                     
   459                           ;Program_main.c: 74:     ADCON1 = 0X0F;
   460   0006F4  0E0F               	movlw	15
   461   0006F6  6EC1               	movwf	193,c	;volatile
   462   0006F8  0012               	return		;funcret
   463   0006FA                     __end_of_config_IO:
   464                           	callstack 0
   465                           
   466 ;; *************** function _config_FOSC *****************
   467 ;; Defined at:
   468 ;;		line 67 in file "Program_main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, status,2
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   482 ;;      Params:         0       0       0       0       0       0       0
   483 ;;      Locals:         0       0       0       0       0       0       0
   484 ;;      Temps:          0       0       0       0       0       0       0
   485 ;;      Totals:         0       0       0       0       0       0       0
   486 ;;Total ram usage:        0 bytes
   487 ;; Hardware stack levels used: 1
   488 ;; This function calls:
   489 ;;		Nothing
   490 ;; This function is called by:
   491 ;;		_main
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           	psect	text5
   496   0006EA                     __ptext5:
   497                           	callstack 0
   498   0006EA                     _config_FOSC:
   499                           	callstack 30
   500   0006EA                     
   501                           ;Program_main.c: 69:     OSCCON = 0X00;
   502   0006EA  0E00               	movlw	0
   503   0006EC  6ED3               	movwf	211,c	;volatile
   504                           
   505                           ;Program_main.c: 70:     OSCTUNE = 0X00;
   506   0006EE  0E00               	movlw	0
   507   0006F0  6E9B               	movwf	155,c	;volatile
   508   0006F2  0012               	return		;funcret
   509   0006F4                     __end_of_config_FOSC:
   510                           	callstack 0
   511                           
   512                           	psect	rparam
   513   000000                     
   514                           	psect	idloc
   515                           
   516                           ;Config register IDLOC0 @ 0x200000
   517                           ;	unspecified, using default values
   518   200000                     	org	2097152
   519   200000  FF                 	db	255
   520                           
   521                           ;Config register IDLOC1 @ 0x200001
   522                           ;	unspecified, using default values
   523   200001                     	org	2097153
   524   200001  FF                 	db	255
   525                           
   526                           ;Config register IDLOC2 @ 0x200002
   527                           ;	unspecified, using default values
   528   200002                     	org	2097154
   529   200002  FF                 	db	255
   530                           
   531                           ;Config register IDLOC3 @ 0x200003
   532                           ;	unspecified, using default values
   533   200003                     	org	2097155
   534   200003  FF                 	db	255
   535                           
   536                           ;Config register IDLOC4 @ 0x200004
   537                           ;	unspecified, using default values
   538   200004                     	org	2097156
   539   200004  FF                 	db	255
   540                           
   541                           ;Config register IDLOC5 @ 0x200005
   542                           ;	unspecified, using default values
   543   200005                     	org	2097157
   544   200005  FF                 	db	255
   545                           
   546                           ;Config register IDLOC6 @ 0x200006
   547                           ;	unspecified, using default values
   548   200006                     	org	2097158
   549   200006  FF                 	db	255
   550                           
   551                           ;Config register IDLOC7 @ 0x200007
   552                           ;	unspecified, using default values
   553   200007                     	org	2097159
   554   200007  FF                 	db	255
   555                           
   556                           	psect	config
   557                           
   558                           ; Padding undefined space
   559   300000                     	org	3145728
   560   300000  FF                 	db	255
   561                           
   562                           ;Config register CONFIG1H @ 0x300001
   563                           ;	Oscillator Selection bits
   564                           ;	OSC = HS, HS oscillator
   565                           ;	Fail-Safe Clock Monitor Enable bit
   566                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   567                           ;	Internal/External Oscillator Switchover bit
   568                           ;	IESO = OFF, Oscillator Switchover mode disabled
   569   300001                     	org	3145729
   570   300001  02                 	db	2
   571                           
   572                           ;Config register CONFIG2L @ 0x300002
   573                           ;	Power-up Timer Enable bit
   574                           ;	PWRT = OFF, PWRT disabled
   575                           ;	Brown-out Reset Enable bits
   576                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
   577                           ;	Brown Out Reset Voltage bits
   578                           ;	BORV = 3, Minimum setting
   579   300002                     	org	3145730
   580   300002  19                 	db	25
   581                           
   582                           ;Config register CONFIG2H @ 0x300003
   583                           ;	Watchdog Timer Enable bit
   584                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   585                           ;	Watchdog Timer Postscale Select bits
   586                           ;	WDTPS = 32768, 1:32768
   587   300003                     	org	3145731
   588   300003  1E                 	db	30
   589                           
   590                           ; Padding undefined space
   591   300004                     	org	3145732
   592   300004  FF                 	db	255
   593                           
   594                           ;Config register CONFIG3H @ 0x300005
   595                           ;	CCP2 MUX bit
   596                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
   597                           ;	PORTB A/D Enable bit
   598                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   599                           ;	Low-Power Timer1 Oscillator Enable bit
   600                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   601                           ;	MCLR Pin Enable bit
   602                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   603   300005                     	org	3145733
   604   300005  81                 	db	129
   605                           
   606                           ;Config register CONFIG4L @ 0x300006
   607                           ;	Stack Full/Underflow Reset Enable bit
   608                           ;	STVREN = ON, Stack full/underflow will cause Reset
   609                           ;	Single-Supply ICSP Enable bit
   610                           ;	LVP = OFF, Single-Supply ICSP disabled
   611                           ;	Extended Instruction Set Enable bit
   612                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   613                           ;	Background Debugger Enable bit
   614                           ;	DEBUG = 0x1, unprogrammed default
   615   300006                     	org	3145734
   616   300006  81                 	db	129
   617                           
   618                           ; Padding undefined space
   619   300007                     	org	3145735
   620   300007  FF                 	db	255
   621                           
   622                           ;Config register CONFIG5L @ 0x300008
   623                           ;	Code Protection bit
   624                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
   625                           ;	Code Protection bit
   626                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
   627                           ;	Code Protection bit
   628                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
   629                           ;	Code Protection bit
   630                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
   631   300008                     	org	3145736
   632   300008  0F                 	db	15
   633                           
   634                           ;Config register CONFIG5H @ 0x300009
   635                           ;	Boot Block Code Protection bit
   636                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
   637                           ;	Data EEPROM Code Protection bit
   638                           ;	CPD = OFF, Data EEPROM not code-protected
   639   300009                     	org	3145737
   640   300009  C0                 	db	192
   641                           
   642                           ;Config register CONFIG6L @ 0x30000A
   643                           ;	Write Protection bit
   644                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
   645                           ;	Write Protection bit
   646                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
   647                           ;	Write Protection bit
   648                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
   649                           ;	Write Protection bit
   650                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
   651   30000A                     	org	3145738
   652   30000A  0F                 	db	15
   653                           
   654                           ;Config register CONFIG6H @ 0x30000B
   655                           ;	Configuration Register Write Protection bit
   656                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   657                           ;	Boot Block Write Protection bit
   658                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
   659                           ;	Data EEPROM Write Protection bit
   660                           ;	WRTD = OFF, Data EEPROM not write-protected
   661   30000B                     	org	3145739
   662   30000B  E0                 	db	224
   663                           
   664                           ;Config register CONFIG7L @ 0x30000C
   665                           ;	Table Read Protection bit
   666                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
   667                           ;	Table Read Protection bit
   668                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
   669                           ;	Table Read Protection bit
   670                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
   671                           ;	Table Read Protection bit
   672                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
   673   30000C                     	org	3145740
   674   30000C  0F                 	db	15
   675                           
   676                           ;Config register CONFIG7H @ 0x30000D
   677                           ;	Boot Block Table Read Protection bit
   678                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
   679   30000D                     	org	3145741
   680   30000D  40                 	db	64
   681                           tosu	equ	0xFFF
   682                           tosh	equ	0xFFE
   683                           tosl	equ	0xFFD
   684                           stkptr	equ	0xFFC
   685                           pclatu	equ	0xFFB
   686                           pclath	equ	0xFFA
   687                           pcl	equ	0xFF9
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           prodh	equ	0xFF4
   693                           prodl	equ	0xFF3
   694                           indf0	equ	0xFEF
   695                           postinc0	equ	0xFEE
   696                           postdec0	equ	0xFED
   697                           preinc0	equ	0xFEC
   698                           plusw0	equ	0xFEB
   699                           fsr0h	equ	0xFEA
   700                           fsr0l	equ	0xFE9
   701                           wreg	equ	0xFE8
   702                           indf1	equ	0xFE7
   703                           postinc1	equ	0xFE6
   704                           postdec1	equ	0xFE5
   705                           preinc1	equ	0xFE4
   706                           plusw1	equ	0xFE3
   707                           fsr1h	equ	0xFE2
   708                           fsr1l	equ	0xFE1
   709                           bsr	equ	0xFE0
   710                           indf2	equ	0xFDF
   711                           postinc2	equ	0xFDE
   712                           postdec2	equ	0xFDD
   713                           preinc2	equ	0xFDC
   714                           plusw2	equ	0xFDB
   715                           fsr2h	equ	0xFDA
   716                           fsr2l	equ	0xFD9
   717                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      5       5
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eusart_string@str	PTR unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_eusart_string
    _eusart_string->_eusart_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     151
                                              3 COMRAM     2     2      0
                        _config_FOSC
                          _config_IO
                        _eusart_init
                      _eusart_string
                       _eusart_write
 ---------------------------------------------------------------------------------
 (1) _eusart_string                                        2     0      2     136
                                              1 COMRAM     2     0      2
                       _eusart_write
 ---------------------------------------------------------------------------------
 (1) _eusart_write                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_IO
   _eusart_init
   _eusart_string
     _eusart_write
   _eusart_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      5       5       1        3.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRhhh        2C      0       0      16        0.0%
BITBIGSFRhhlh       11      0       0      17        0.0%
BITBIGSFRhhll        8      0       0      18        0.0%
BITBIGSFRhlh         8      0       0      19        0.0%
BITBIGSFRlh          C      0       0      20        0.0%
BITBIGSFRllh         2      0       0      21        0.0%
BITBIGSFRlll        1B      0       0      22        0.0%
ABS                  0      0       0      23        0.0%
BIGRAM             5FF      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Aug 16 19:04:57 2023

                     l22 06B6                       l31 06B2                       l25 06C8  
                     l19 06DA                       l54 06F2                       l57 06F8  
                     u10 06C4                       u11 06C0                       u40 06B2  
                     u41 06AE                       u57 066A                      l801 0696  
                    l811 0624                      l803 0606                      l741 06B6  
                    l821 0642                      l813 062A                      l805 0612  
                    l743 06C4                      l823 0648                      l815 0630  
                    l807 0618                      l745 06CA                      l825 064E  
                    l817 0636                      l809 061E                      l747 06D6  
                    l827 0654                      l819 063C                      l757 06EA  
                    l829 0660                      l759 06F4                      l795 067E  
                    l797 0682                      l799 0692                      wreg 000FE8  
          eusart_write@c 0001                     STR_1 0601                     _RCIF 007CF5  
                   _TRMT 007D61                     _main 0606                     start 0000  
           ___param_bank 000000                    ?_main 0001                    _RCREG 000FAE  
                  _SPBRG 000FAF                    _TXREG 000FAD             ?_eusart_init 0001  
                  tablat 000FF5                    status 000FD8          __initialization 06DC  
           __end_of_main 067E                   ??_main 0004            __activetblptr 000001  
                 _ADCON1 000FC1                   _OSCCON 000FD3                   isa$std 000001  
          ?_eusart_write 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 06DC            ___rparam_used 000001         eusart_string@str 0002  
         __pcstackCOMRAM 0001           ??_eusart_write 0001                  _OSCTUNE 000F9B  
          _eusart_string 067E                  __Hparam 0000                  __Lparam 0000  
      __end_of_config_IO 06FA             __psmallconst 0600                  __pcinit 06DC  
                __ramtop 0600                  __ptext0 0606                  __ptext1 067E  
                __ptext2 06B4                  __ptext3 06CA                  __ptext4 06F4  
                __ptext5 06EA     end_of_initialization 06DC           ?_eusart_string 0002  
   __end_of_eusart_write 06CA                _RCSTAbits 000FAB            ??_config_FOSC 0001  
              _TXSTAbits 000FAC              _BAUDCTLbits 000FB8      start_initialization 06DC  
        ??_eusart_string 0004      __end_of_config_FOSC 06F4            ??_eusart_init 0001  
              _config_IO 06F4             _eusart_write 06B4              __smallconst 0600  
            _config_FOSC 06EA      __end_of_eusart_init 06DC               ?_config_IO 0001  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0600  
            _eusart_init 06CA                 isa$xinst 000000              ??_config_IO 0001  
  __end_of_eusart_string 06B4             ?_config_FOSC 0001  
